** 2.6 Local Functions (로컬 함수)

 When we define funcitons with lambda-expressions, we face a restriction which 
doesn't arise with defun: a function defined in a lambda-expression doesn't have 
a name and therefore has no way of referring to itself.
람다식에는 이름이 없기 때문에 그 자신을 참조하기 위한 방법이 없다.

 This means that in Common Lisp we can't use lambda to define a recursive function. 
이 것은 람다식을 사용해서는 재귀함수를 작성할 수 없다는 것을 의미한다.
 If we want to apply some function to all the elements of a list, we use the most 
familiar of Lisp idioms:

> (mapcar #'(lambda (x) (+ 2 x))
           '(2 5 7 3))

(4 7 9 5)

 What about cases where we want to give a recursive function as the first argument
to mapcar? If the function has been defined with defun, we can simply refer to it
by name:

> (mapcar #'copy-tree '((a b) (c d e)))

((A B) (C D E))

 But now suppose that the function has to be a closure, taking some bindings from
the environment in which the mapcar occurs. In our example list+,

(defun list+ (lst n)
   (mapcar #'(lambda (x) (+ x n))
           lst))


 the first argument to mapcar, #'(lambda (x) (+ x n)), must be defined within list+
because it needs to catch the binding of n. So far so good, but what if we want to 
give *mapcar* a function which both needs local bindings /and/ is recursive?
We can't use a function defined elsewhere with *defun*, because we need bindings
from the local environment. And we can't use *lambda* to define a recursive 
function, because the function will have no way of referring to itself. 

 Common Lisp gives us *labels* as a way out of this dilemma. With on important
reservation, *labels* could be described as a sort of *let* for functions. 
Each of the binding specifications in a labels expression should have the form

(<name> <parameters> . <body>)

Within the labels expression, <name> will refer to a function equivalent to:

#'(lambda <parameters> . <body>)

So for example:

> (labels ((inc (x) (1+ x)))
    (inc 3))

4

 However, there is an important difference between *let* and *labels*. In a let
expression, the value of one variable can't depend on another variable made by
the same let- this is, you can't say

(let ((x 10) (y x))
     y)         

and expect the value of the new y to reflect that of the new x. In constrast, 
the body of a function f defined in a labels expression may refer to any other
function defined there, including f itself, which makes recursive function 
definitions possible. 

 Using labels we can write a function analogous to list+, but in which the first 
argument to mapcar is a recursive function:

(defun count-instances (obj lsts)
  (labels ((instances-in (lst)
              (if (consp lst)
                  (+ (if (eq (car lst) obj) 1 0)
                     (instances-in (cdr lst)))
                  0)))
      (mapcar #'instances-in lsts)))

This function takes an object and a list, and returns a list of the number of
occurrences of the object in each element:

> (count-instances 'a '((a b c) (d a r p a) (d a r) (a a)))

(1 2 1 2)

로컬 함수이면서 재귀인 함수를 작성할 필요가 있다고 하자. 재귀함수를 작성하려면 함수에 이름을 붙이지 않으면 안된다.  그러나 함수에 이름을 붙이기 위해서 defun을 사용하면 로컬함수가 아니게 되어버린다. 이를 해결하기 위해서 labels 를 사용할 수 있다. 
lables 는 함수에 붙이는 let 과도 같은데, 한 가지 중요한 차이점이 있다. let 식에서는 어떤 변수의 값을 같은 let 으로 만들어진 다른 변수의 값으로 저장하는 것이 불가능하다. labels는 함수내에서 다른 함수에 접근하는 것이 가능하다. 
(2017.2.28)
